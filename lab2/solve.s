	ADR	SP, _stack
	B	main

FONT_WIDTH	EQU	7
FONT_HEIGHT	EQU	8
ROWS		EQU	240
COLS		EQU	320


fbuf	DEFW &AC00_0000
; implement a basic cursor, 4 bytes for each
curcol	DEFW 0
currow	DEFW 0


chars	DEFB	"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&'()*+,-./:;<=>?@[\]^_`{|}~"
	ALIGN
clen	DEFW	93

msg	DEFB	"Hello World\!"
	ALIGN
mlen	DEFW	12

; colours
purple	DEFB	0x80, 0x00, 0x80
	ALIGN
white	DEFB	0xFF, 0xFF, 0xFF
	ALIGN
black	DEFB	0x00, 0x00, 0x00
	ALIGN

main	; clear the screen
	ADR	R2, purple
	BL	clrscr

	; write out the image
	BL	wimage
	; now write the string
	;ADR	R0, chars
	;LDR	R1, clen
	;BL	wstr

	; set the cursor to the middle of the screen
	MOV	R0, #20 ; col
	MOV	R1, #15 ; row
	LDR	R2, mlen
	LSR	R2, R2, #1
	SUB	R0, R0, R2
	BL	setcur

	; now write the string
	ADR	R0, msg
	LDR	R1, mlen
	BL	wstr

	SVC 	2

; get the col and row from the cursor
; col in R0, row in R1
getcur	LDR	R0, curcol
	LDR	R1, currow
	MOV	PC, LR

; set the col and row from the cursor
; col in R0, row in R1
; clobbers R0 and R1 - setting them to the wrapped cursor position
setcur	PUSH	{R2}
	; handle wrapping
	; if col > 40; col = 0; row += 1
	CMP	R0, #40
	MOVGE	R0, #0
	ADDGE	R1, R1, #1
	ADR	R2, curcol
	STR	R0, [R2]
	ADR	R2, currow
	STR	R1, [R2]
	POP	{R2}
	MOV	PC, LR

; calculate the row and column from the cursor position
; screen is 320x240 which is 40 columns and 30 rows of 8x8 cells
; returns x in R0, y in R1
getpos	LDR	R0, curcol ; get column value
	LSL	R0, R0, #3 ; col *= 8	
	LDR	R1, currow ; get row value
	LSL	R1, R1, #3 ; row *= 8	
	MOV	PC, LR

; set the cursor position from x, y
; takes x in R0, y in R1
setpos	PUSH	{R0-R2,LR}
	LSR	R0, R0, #3 ; col /= 8	
	LSR	R1, R1, #3 ; row /= 8	
	BL	setcur
	POP	{R0-R2,LR}
	MOV	PC, LR

; writes a string out to the terminal
; takes pointer to string in R0, length of string in R1
wstr	PUSH	{R0,R1,LR}
	; move arguments to new registers
	MOV	R2, R0
	MOV	R3, R1
mloop	LDRB	R0, [R2], #1
	BL	getchad
	BL	wfchar
	SUBS	R3, R3, #1
	BNE	mloop
	POP	{R0,R1,LR}
	MOV	PC, LR

; write font character to row, col
; and update the cursor
; takes the address of a character in R0
wfchar	PUSH	{R0-R3,LR}
	; copy the font address into R2
	MOV	R2, R0
	; get the coordinates to write to
	BL	getpos
	; write the 7 columns from the font 
	MOV	R3, #7
wfclp	BL	wfcol
	; increment the font column and the actual column
	ADD	R0, R0, #1
	ADD	R2, R2, #1
	SUBS	R3, R3, #1
	BNE	wfclp

	; blank column
	; get a pointer to 0x00
	MOV	R3, #0
	PUSH	{R3}
	MOV	R2, SP
	;ADR	R2, white
	BL	wfcol
	ADD	R0, R0, #1
	POP	{R3}

	; set the new cursor position
	BL	setpos
	; could just do an add but pop does the maths for me

	POP	{R0-R3,LR}
	MOV	PC, LR

; write a font column starting at the given row, col
; row in R0, col in R1, font column address in R2
wfcol	PUSH	{R1-R4,LR}
	LDR	R3, [R2]
	MOV	R4, #8
cloop	TST	R3, #1     ; test last bit of font
	ADR	R2, white
	ADRNE	R2, black
loaded	BL	setpix
	ADD	R1, R1, #1 ; increment the column
	SUBS	R4, R4, #1 ; subtract one from the counter
	LSR	R3, R3, #1 ; shift the font one bit right
	BNE	cloop
	POP	{R1-R4,LR}
	MOV	PC, LR

; clears the entire screen
; writes the colour in R2 to the entire screen
clrscr	PUSH 	{R0,R1,R4,R5,LR}
	MOV	R5, #ROWS
loop	MOV	R4, #COLS
rloop	SUB	R0, R4, #1
	SUB	R1, R5, #1
	BL	setpix
	SUBS	R4, R4, #1
	BNE	rloop
	SUBS	R5, R5, #1
	BNE	loop
	POP 	{R0,R1,R4,R5,LR}
	MOV	PC, LR

; set pixel at x: R0, y: R1 to the pixel value at R2
setpix	PUSH	{R0-R3}
	MOV	R3, #960
	MUL	R1, R1, R3
	MOV	R3, #3
	MUL	R0, R0, R3
	ADD	R0, R0, R1
	; R0 = 960 * y + 3 * x
	LDR	R3, fbuf
	ADD	R0, R0, R3
	; Address of R0 is the pixel component to write to
	; load and write R value
	LDRB	R3, [R2], #1
	STRB	R3, [R0], #1
	; load and write G value
	LDRB	R3, [R2], #1
	STRB	R3, [R0], #1
	; load and write B value
	LDRB	R3, [R2]
	STRB	R3, [R0]
	POP	{R0-R3}
	MOV	PC, LR

; this is here so that font doesn't become out of range for the ADR instruction
; get the address of the font glyph for character in R0 - returns result in R0
getchad	PUSH	{R1}
	SUB	R0, R0, #&20 ; get offset of char from space
	MOV	R1, #7       ; multiply char offset by 7
	MUL	R0, R0, R1
	ADR	R1, font
	ADD	R0, R0, R1   ; add the offset to the base address
	POP	{R1}
	MOV	PC, LR

	DEFS 100 ; define our stack to be 100 bytes
_stack

; starts at first ascii character - ' ' 0x20
font	DEFB 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00
	DEFB 0x14, 0x7f, 0x14, 0x7f, 0x14, 0x00, 0x00
	DEFB 0x6f, 0x49, 0xc9, 0x7b, 0x00, 0x00, 0x00
	DEFB 0x63, 0x13, 0x08, 0x64, 0x63, 0x00, 0x00
	DEFB 0x7f, 0xc9, 0x49, 0x63, 0x00, 0x00, 0x00
	DEFB 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x3e, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x41, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x0a, 0x04, 0x1f, 0x04, 0x0a, 0x00, 0x00
	DEFB 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00
	DEFB 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00
	DEFB 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x60, 0x10, 0x08, 0x04, 0x03, 0x00, 0x00
	DEFB 0x7f, 0x41, 0x41, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x01, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x7b, 0x49, 0x49, 0x6f, 0x00, 0x00, 0x00
	DEFB 0x63, 0x49, 0x49, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x0f, 0x08, 0x08, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x6f, 0x49, 0x49, 0x7b, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x49, 0x49, 0x7b, 0x00, 0x00, 0x00
	DEFB 0x03, 0x01, 0x01, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x49, 0x49, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x0f, 0x09, 0x09, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00
	DEFB 0x14, 0x14, 0x14, 0x14, 0x00, 0x00, 0x00
	DEFB 0x22, 0x14, 0x08, 0x00, 0x00, 0x00, 0x00
	DEFB 0x03, 0x59, 0x09, 0x0f, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x41, 0x5d, 0x55, 0x5f, 0x00, 0x00
	DEFB 0x7f, 0x09, 0x09, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x49, 0x49, 0x77, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x41, 0x41, 0x63, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x41, 0x41, 0x3e, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x49, 0x49, 0x63, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x09, 0x09, 0x03, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x41, 0x49, 0x7b, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x08, 0x08, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x41, 0x7f, 0x41, 0x00, 0x00, 0x00, 0x00
	DEFB 0x60, 0x40, 0x40, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x08, 0x08, 0x77, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x40, 0x40, 0x60, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x01, 0x01, 0x7f, 0x01, 0x01, 0x7f
	DEFB 0x7f, 0x01, 0x01, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x41, 0x41, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x09, 0x09, 0x0f, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x41, 0xc1, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x09, 0x09, 0x77, 0x00, 0x00, 0x00
	DEFB 0x6f, 0x49, 0x49, 0x7b, 0x00, 0x00, 0x00
	DEFB 0x01, 0x01, 0x7f, 0x01, 0x01, 0x00, 0x00
	DEFB 0x7f, 0x40, 0x40, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x20, 0x10, 0x0f, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x40, 0x40, 0x7f, 0x40, 0x40, 0x7f
	DEFB 0x77, 0x08, 0x08, 0x77, 0x00, 0x00, 0x00
	DEFB 0x6f, 0x48, 0x48, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x71, 0x49, 0x49, 0x47, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x03, 0x04, 0x08, 0x10, 0x60, 0x00, 0x00
	DEFB 0x41, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x00
	DEFB 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00
	DEFB 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x74, 0x54, 0x54, 0x7c, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x44, 0x44, 0x7c, 0x00, 0x00, 0x00
	DEFB 0x7c, 0x44, 0x44, 0x6c, 0x00, 0x00, 0x00
	DEFB 0x7c, 0x44, 0x44, 0x7f, 0x00, 0x00, 0x00
	DEFB 0x7c, 0x54, 0x54, 0x5c, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x05, 0x05, 0x01, 0x00, 0x00, 0x00
	DEFB 0xbc, 0xa4, 0xa4, 0xfc, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x04, 0x04, 0x7c, 0x00, 0x00, 0x00
	DEFB 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x80, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x04, 0x04, 0x7a, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x7c, 0x04, 0x04, 0x7c, 0x04, 0x04, 0x7c
	DEFB 0x7c, 0x04, 0x04, 0x7c, 0x00, 0x00, 0x00
	DEFB 0x7c, 0x44, 0x44, 0x7c, 0x00, 0x00, 0x00
	DEFB 0xfc, 0x44, 0x44, 0x7c, 0x00, 0x00, 0x00
	DEFB 0x7c, 0x44, 0x44, 0xfc, 0x00, 0x00, 0x00
	DEFB 0x7c, 0x04, 0x04, 0x0c, 0x00, 0x00, 0x00
	DEFB 0x5c, 0x54, 0x54, 0x74, 0x00, 0x00, 0x00
	DEFB 0x7f, 0x44, 0x44, 0x60, 0x00, 0x00, 0x00
	DEFB 0x7c, 0x40, 0x40, 0x7c, 0x00, 0x00, 0x00
	DEFB 0x7c, 0x20, 0x10, 0x0c, 0x00, 0x00, 0x00
	DEFB 0x7c, 0x40, 0x40, 0x7c, 0x40, 0x40, 0x7c
	DEFB 0x6c, 0x10, 0x10, 0x6c, 0x00, 0x00, 0x00
	DEFB 0xbc, 0xa0, 0xa0, 0xfc, 0x00, 0x00, 0x00
	DEFB 0x64, 0x54, 0x54, 0x4c, 0x00, 0x00, 0x00
	DEFB 0x08, 0x3e, 0x41, 0x00, 0x00, 0x00, 0x00
	DEFB 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	DEFB 0x41, 0x3e, 0x08, 0x00, 0x00, 0x00, 0x00
	DEFB 0x1c, 0x04, 0x1c, 0x10, 0x1c, 0x00, 0x00

	ALIGN
; image is 240x240
wimage	PUSH	{R0-R6,LR}
	; load the address of the image
	ADR	R2, image_start
	; loop col from 40 to 279
	MOV	R1, #0
rowlp	MOV	R0, #40
collp	BL	setpix
	ADD	R2, R2, #3 ; increment pixel pointer to next pixel
	ADD	R0, R0, #1 ; x += 1
	CMP	R0, #280
	BLT	collp
	ADD	R1, R1, #1 ; y += 1
	CMP	R1, #240
	BLT	rowlp
	POP	{R0-R6,LR}
	MOV	PC, LR

image_start
INCLUDE	image.s
